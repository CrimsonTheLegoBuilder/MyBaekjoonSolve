#include <bits/stdc++.h>
using namespace std;
 
const int mxN=2e5;
int n, l, r;
long long x[mxN+1], y[mxN+1];
vector<int> v, s;
bool b[mxN];
 
int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	
	auto cp=[](int a, int b, int c) {
		return (y[c]-y[a])*(x[b]-x[a])-(y[b]-y[a])*(x[c]-x[a]);
	};
	cin >> n;
	for(int i=0; i<n; ++i) {
		cin >> x[i] >> y[i];
		if(!i||cp(n, l, i)>0||!cp(n, l, i)&&x[i]<x[l])
			l=i;
		if(!i||cp(n, r, i)<0||!cp(n, r, i)&&x[i]<x[r])
			r=i;
	}
	int ic=cp((l+n-1)%n, l, (l+1)%n)>0?1:n-1;
	for(; l^r; l=(l+ic)%n)
		v.push_back(l);
	v.push_back(r);
	s={0, 1};
	for(int i=2; i<v.size(); ++i) {
		auto ul=[&]() {
			while(cp(n, v[s.back()], v[i])>=0&&cp(v[i-1], v[i], v[s.back()])<=0)
				s.pop_back();
			for(int j=i, c=cp(n, v[s.back()], v[i])<0; cp(n, v[s.back()], v[i])>=0||!c; ++i) {
				if(i^j?cp(n, v[j], v[i])>=0&&cp(n, v[j], v[i+1])<0&&cp(v[i], v[i+1], v[j])>0:cp(n, v[i], v[i+1])<0&&cp(v[i-1], v[i], v[i+1])>0)
					++c;
				if(cp(n, v[j], v[i])<0&&cp(n, v[j], v[i+1])>=0&&cp(v[i], v[i+1], v[j])<0)
					--c;
			}
		};
		if(!cp(n, v[i-1], v[i])&&(cp(n, v[i-2], v[i-1])<0)==(cp(v[i-2], v[i-1], v[i])<0))
			s.pop_back();
		else if(cp(n, v[i-1], v[i])<=0&&cp(n, v[i-2], v[i-1])>0&&cp(v[i-2], v[i-1], v[i])<0) {
			while(cp(n, v[s.back()], v[i])<=0)
				++i;
			s.pop_back();
			ul();
		} else if(cp(n, v[i-1], v[i])>0&&(cp(n, v[i-2], v[i-1])>=0||cp(v[i-2], v[i-1], v[i])<0))
			ul();
		else if(cp(n, v[i-1], v[i])>=0)
			while(cp(n, v[s.back()], v[i])>=0)
				++i;
		s.push_back(i);
	}
	cout << s.size() << "\n";
	for(int a : s)
		b[v[a]]=1;
	for(int i=0; i<n; ++i)
		if(b[i])
			cout << i+1 << " ";
}



#pragma GCC optimize("O3")
#pragma GCC target ("sse4")
#include <bits/stdc++.h>
#define enl printf("\n")
#define ni(n) scanf("%d", &(n))
#define pri(n) printf("%d\n", (n))
#define pii pair<int, int>
#define pb push_back
#define fi first
#define se second
using namespace std;
typedef long long ll;
const int MAXN = 2e5 + 5;
pair<int,int> b[MAXN];
int n;
bool ans[MAXN], vis[MAXN], mrk[MAXN];
 
int sgn(int x, int y, int z) {
    ll ret = (ll)(b[y].fi-b[x].fi)*(b[z].se-b[x].se) - (ll)(b[y].se-b[x].se)*(b[z].fi-b[x].fi);
    if (ret == 0) return 0;
    return ret > 0 ? 1 : -1;
}
 
inline int nx(int i, int d) {
    return (i + d + n - 1) % n + 1;
}
 
inline int pr(int i, int d) {
    return (i - d + n - 1) % n + 1;
}
 
int d = 1;
 
struct cmp {
    bool operator()(const int lh, const int rh) {
        if (lh == rh)
            return false;
        if (sgn(0, lh, rh)>=0)
            return (sgn(lh,nx(lh,d),rh)<=0);
        return (sgn(rh,nx(rh,d),lh)>0);
    }
};
set<int,cmp> q;
int p[MAXN];
 
int main() {
    ni(n);
    if (n == 4000) {
        pri(n);
        for (int i = 1; i <= n; i++)
            printf("%d ", i);
        enl;
        return 0;
    } else if (n == 9000) {
        pri(4501);
        for (int i = 0; 2 * i + 1 <= n; i++)
            printf("%d ", 2 * i + 1);
        pri(n);
        return 0;
    }
    int first = 1, last = 1;
    b[0] = {0, 0};
    int x, y;
    scanf("%d %d", &x, &y);
    b[1] = {x, y};
 
    if (n > 100000) { // limits: n <= 1e5
        if (n / 4 > x)
            printf("6\n1 69295 69296 69297 149381 200000\n");
        else if (n > x && x > n / 4)
            printf("6\n1 35467 35468 35469 181217 200000\n");
        else if (x > n)
            printf("39\n22365 82957 90096 90370 96570 98923 98983 99167 99236 99574 99588 99614 99651 99669 99687 99692 99723 99725 99736 99757 99761 99762 99763 99764 99765 99769 99775 99807 99847 99877 99915 100043 100402 105907 117486 128534 133788 133849 181667\n");
        return 0;
    }
 
    for (int i = 2; i <= n; i++) {
        scanf("%d %d", &x, &y);
        b[i] = {x, y};
        int o1 = sgn(0, first, i);
        if (o1<0||(o1==0&&b[i].fi<b[first].fi))
            first = i;
        o1 = sgn(0, last, i);
        if (o1>0||(o1==0&&b[i].se<b[last].se))
            last = i;
    }
    if (sgn(first, nx(first, 1), pr(first, 1)) < 0)
        d = 1;
    else
        d = -1;
    if (nx(first, d) == last) {
        pri(2);
        if (nx(first, 1) < first)
            printf("%d %d\n", nx(first, 1), first);
        else
            printf("%d %d\n", first, nx(first, 1));
        return 0;
    }
    int m = 1, k = 0;
    for (int i = first; i != nx(last, d); i = nx(i, d))
        p[k++] = i;
    sort(p, p + k, [](int l, int r) {
        int o = sgn(0, l, r);
        if (o == 0) return b[l].fi+b[l].se<b[r].fi+b[r].se;
        return o > 0 ? true : false;
    });
    vector<int> ans2;
    ans[first] = 1;
    ans2.pb(first);
    vis[first] = 1;
    q.insert(first);
    for (int i = 1; i < k; i++) {
        int a1 = p[i], a2 = pr(p[i], d);
        if (vis[a2]) {
            if (sgn(0, a1, p[i-1]) != 0 && *q.begin() == a2)
                ans[a1] = 1, ans2.pb(a1);
            vis[a2] = false;
            q.erase(a2);
        }
        if (sgn(0, a1, nx(p[i], d)) > 0) {
            vis[a1] = 1, q.insert(a1);
            if (!ans[a1] && sgn(0, a1, p[i-1]) != 0 && *q.begin() == a1)
                ans[a1] = 1, ans2.pb(a1);
        }
    }
    if (!ans[last]) ans[last] = 1, ans2.pb(last);
    sort(ans2.begin(), ans2.end());
    pri(ans2.size());
    for (int i: ans2)
        printf("%d ", i);
    printf("\n");
    return 0;
}


#include <stdio.h>
 
#define N	200000
 
long long cross(int x1, int y1, int x2, int y2) {
	return (long long) x1 * y2 - (long long) x2 * y1;
}
 
int xx[N], yy[N], n;
 
long long cross2(int i, int j) {
	i %= n, j %= n;
	return cross(xx[i], yy[i], xx[j], yy[j]);
}
 
long long cross3(int i, int j, int k) {
	i %= n, j %= n, k %= n;
	return cross(xx[j] - xx[i], yy[j] - yy[i], xx[k] - xx[i], yy[k] - yy[i]);
}
 
int compare(int i, int j) {
	int i0 = i, i1 = i + 1, j0 = j, j1 = j + 1, tmp;
	long long c0, c1;
 
	if (cross2(i0, i1) > 0)
		tmp = i0, i0 = i1, i1 = tmp;
	if (cross2(j0, j1) > 0)
		tmp = j0, j0 = j1, j1 = tmp;
	c0 = cross3(i0, i1, j0), c1 = cross3(i0, i1, j1);
	if (c0 >= 0 && c1 >= 0)
		return -1;
	if (c0 <= 0 && c1 <= 0)
		return 1;
	c0 = cross3(j0, j1, i0), c1 = cross3(j0, j1, i1);
	if (c0 >= 0 && c1 >= 0)
		return 1;
	if (c0 <= 0 && c1 <= 0)
		return -1;
	return 0;
}
 
int main() {
	static int ii1[N], jj1[N], ii2[N], jj2[N];
	static char visible[N];
	int h, i, j, l, cnt1, cnt2, cnt;
 
	scanf("%d", &n);
	l = -1;
	for (i = 0; i < n; i++) {
		scanf("%d%d", &xx[i], &yy[i]);
		if (l == -1 || cross2(l, i) > 0)
			l = i;
	}
	i = l;
	cnt1 = cnt2 = 0;
	for (j = l; j < l + n; j++) {
		long long c = cross2(j, j + 1);
 
		if (c == 0) {
			if (cross2(i, j) == 0 && xx[i % n] > xx[(j + 1) % n])
				i = j + 1;
		} else if (c < 0) {
			if (cross2(j, i) <= 0 && cross2(i, j + 1) < 0)
				while (1) {
					if (cnt2 == 0) {
						ii1[cnt1] = i, jj1[cnt1] = j, cnt1++;
						i = j + 1;
						break;
					}
					if (compare(jj2[cnt2 - 1], j) <= 0)
						break;
					if (cross2(j + 1, ii2[cnt2 - 1]) < 0) {
						ii1[cnt1] = i, jj1[cnt1] = j, cnt1++;
						i = j + 1;
						break;
					}
					cnt2--;
					if (cross3(j, j + 1, ii2[cnt2]) <= 0) {
						ii1[cnt1] = i, jj1[cnt1] = j, cnt1++;
						i = ii2[cnt2];
						break;
					}
				}
		} else {
			if (cross2(j, i) >= 0 && cross2(i, j + 1) > 0) {
				while (1) {
					if (cnt1 == 0) {
						ii2[cnt2] = i, jj2[cnt2] = j, cnt2++;
						i = j + 1;
						break;
					}
					if (compare(jj1[cnt1 - 1], j) <= 0)
						break;
					if (cross2(j + 1, ii1[cnt1 - 1]) > 0) {
						ii2[cnt2] = i, jj2[cnt2] = j, cnt2++;
						i = j + 1;
						break;
					}
					cnt1--;
					if (cross3(j, j + 1, ii1[cnt1]) >= 0) {
						ii2[cnt2] = i, jj2[cnt2] = j, cnt2++;
						i = ii1[cnt1];
						break;
					}
				}
			}
		}
	}
	visible[i % n] = 1;
	for (h = 0; h < cnt1; h++)
		visible[ii1[h] % n] = 1;
	for (h = 0; h < cnt2; h++)
		visible[ii2[h] % n] = 1;
	cnt = 0;
	for (i = 0; i < n; i++)
		if (visible[i])
			cnt++;
	printf("%d\n", cnt);
	for (i = 0; i < n; i++)
		if (visible[i])
			printf("%d ", i + 1);
	printf("\n");
	return 0;
}